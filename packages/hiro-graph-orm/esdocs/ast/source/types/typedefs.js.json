{
  "type": "Program",
  "body": [],
  "sourceType": "module",
  "range": [
    1077,
    1077
  ],
  "loc": {
    "start": {
      "line": 36,
      "column": 0
    },
    "end": {
      "line": 36,
      "column": 0
    }
  },
  "leadingComments": [
    {
      "type": "Block",
      "value": "*\n * The codec represents a simple `encode`/`decode` function pair\n *\n * @typedef {Object} Codec\n * @property {function(input: *): string} encode - the `encoder` function\n * @property {function(input: string): *} decode - the `decoder` function\n ",
      "range": [
        0,
        250
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 7,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Represents a result which is either a single vertex or an array of them\n *\n * @typedef {GraphVertex|Array<GraphVertex>} OneOrMoreVertices\n ",
      "range": [
        252,
        400
      ],
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 13,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n *  This is our representation of a Lucene Query.\n *\n *  When parsed the keys and value's here automagically get converted by our {@link Schema}\n *  into the correct values for the GraphIT side.\n *\n *  For the full API documentation for this look at [Lucene Queries](manual/usage.html#lucene-query-syntax)\n *\n *  @typedef {object} LuceneQuery\n ",
      "range": [
        402,
        752
      ],
      "loc": {
        "start": {
          "line": 15,
          "column": 0
        },
        "end": {
          "line": 24,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n  *  A possible branch definition for a Gremlin function\n  *\n  *  Used in `transform`, `copySplit`, etc...\n  *\n  *  It is either a static string, or a function which is provided a gremlin pipeline\n  *  which the function should act on.\n  *\n  *  @typedef {string|function(pipe: GremlinQueryBuilder)} GremlinBranch\n  ",
      "range": [
        755,
        1076
      ],
      "loc": {
        "start": {
          "line": 26,
          "column": 1
        },
        "end": {
          "line": 35,
          "column": 4
        }
      }
    }
  ],
  "comments": [
    {
      "type": "Block",
      "value": "*\n * The codec represents a simple `encode`/`decode` function pair\n *\n * @typedef {Object} Codec\n * @property {function(input: *): string} encode - the `encoder` function\n * @property {function(input: string): *} decode - the `decoder` function\n ",
      "range": [
        0,
        250
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 7,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Represents a result which is either a single vertex or an array of them\n *\n * @typedef {GraphVertex|Array<GraphVertex>} OneOrMoreVertices\n ",
      "range": [
        252,
        400
      ],
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 13,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n *  This is our representation of a Lucene Query.\n *\n *  When parsed the keys and value's here automagically get converted by our {@link Schema}\n *  into the correct values for the GraphIT side.\n *\n *  For the full API documentation for this look at [Lucene Queries](manual/usage.html#lucene-query-syntax)\n *\n *  @typedef {object} LuceneQuery\n ",
      "range": [
        402,
        752
      ],
      "loc": {
        "start": {
          "line": 15,
          "column": 0
        },
        "end": {
          "line": 24,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n  *  A possible branch definition for a Gremlin function\n  *\n  *  Used in `transform`, `copySplit`, etc...\n  *\n  *  It is either a static string, or a function which is provided a gremlin pipeline\n  *  which the function should act on.\n  *\n  *  @typedef {string|function(pipe: GremlinQueryBuilder)} GremlinBranch\n  ",
      "range": [
        755,
        1076
      ],
      "loc": {
        "start": {
          "line": 26,
          "column": 1
        },
        "end": {
          "line": 35,
          "column": 4
        }
      }
    }
  ]
}