{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "encode",
            "range": [
              834,
              840
            ],
            "loc": {
              "start": {
                "line": 19,
                "column": 17
              },
              "end": {
                "line": 19,
                "column": 23
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "encodeInt",
            "range": [
              821,
              830
            ],
            "loc": {
              "start": {
                "line": 19,
                "column": 4
              },
              "end": {
                "line": 19,
                "column": 13
              }
            }
          },
          "range": [
            821,
            840
          ],
          "loc": {
            "start": {
              "line": 19,
              "column": 4
            },
            "end": {
              "line": 19,
              "column": 23
            }
          }
        },
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "decode",
            "range": [
              859,
              865
            ],
            "loc": {
              "start": {
                "line": 20,
                "column": 17
              },
              "end": {
                "line": 20,
                "column": 23
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "decodeInt",
            "range": [
              846,
              855
            ],
            "loc": {
              "start": {
                "line": 20,
                "column": 4
              },
              "end": {
                "line": 20,
                "column": 13
              }
            }
          },
          "range": [
            846,
            865
          ],
          "loc": {
            "start": {
              "line": 20,
              "column": 4
            },
            "end": {
              "line": 20,
              "column": 23
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./_number_utils",
        "raw": "\"./_number_utils\"",
        "range": [
          873,
          890
        ],
        "loc": {
          "start": {
            "line": 21,
            "column": 7
          },
          "end": {
            "line": 21,
            "column": 24
          }
        }
      },
      "range": [
        808,
        891
      ],
      "loc": {
        "start": {
          "line": 18,
          "column": 0
        },
        "end": {
          "line": 21,
          "column": 25
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n *  Integer marshalling is more complex than you would think.\n *  In order to enable sorting on these fields, we have to zero-pad them.\n *  This is because the string values are lexical sorted, so \"10\" comes before \"2\" but not \"02\".\n *\n *  We zero-pad to MAX_SAFE_INTEGER to account for javascripts float-only number system.\n *\n *  Instead of checking for an integer, we simply Math.floor the values.\n *\n *  To account for sign, we subtract negative numbers from MAX_SAFE_INTEGER and prefix with a marker,\n *  positive numbers are prefixed with a different marker.\n *\n *  This has the unfortunate effect of making the database values non-human-readable, but allows sane sorting.\n *\n *  If you do not need negative numbers it is more natural (and probably more performant) to\n *  use the `uint` type.\n ",
          "range": [
            0,
            807
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportDefaultDeclaration",
      "declaration": {
        "type": "ObjectExpression",
        "properties": [
          {
            "type": "Property",
            "key": {
              "type": "Identifier",
              "name": "encode",
              "range": [
                910,
                916
              ],
              "loc": {
                "start": {
                  "line": 23,
                  "column": 17
                },
                "end": {
                  "line": 23,
                  "column": 23
                }
              }
            },
            "value": {
              "type": "Identifier",
              "name": "encode",
              "range": [
                910,
                916
              ],
              "loc": {
                "start": {
                  "line": 23,
                  "column": 17
                },
                "end": {
                  "line": 23,
                  "column": 23
                }
              }
            },
            "kind": "init",
            "method": false,
            "shorthand": true,
            "computed": false,
            "range": [
              910,
              916
            ],
            "loc": {
              "start": {
                "line": 23,
                "column": 17
              },
              "end": {
                "line": 23,
                "column": 23
              }
            }
          },
          {
            "type": "Property",
            "key": {
              "type": "Identifier",
              "name": "decode",
              "range": [
                918,
                924
              ],
              "loc": {
                "start": {
                  "line": 23,
                  "column": 25
                },
                "end": {
                  "line": 23,
                  "column": 31
                }
              }
            },
            "value": {
              "type": "Identifier",
              "name": "decode",
              "range": [
                918,
                924
              ],
              "loc": {
                "start": {
                  "line": 23,
                  "column": 25
                },
                "end": {
                  "line": 23,
                  "column": 31
                }
              }
            },
            "kind": "init",
            "method": false,
            "shorthand": true,
            "computed": false,
            "range": [
              918,
              924
            ],
            "loc": {
              "start": {
                "line": 23,
                "column": 25
              },
              "end": {
                "line": 23,
                "column": 31
              }
            }
          }
        ],
        "range": [
          908,
          926
        ],
        "loc": {
          "start": {
            "line": 23,
            "column": 15
          },
          "end": {
            "line": 23,
            "column": 33
          }
        },
        "leadingComments": [],
        "trailingComments": []
      },
      "range": [
        893,
        927
      ],
      "loc": {
        "start": {
          "line": 23,
          "column": 0
        },
        "end": {
          "line": 23,
          "column": 34
        }
      }
    }
  ],
  "sourceType": "module",
  "range": [
    808,
    927
  ],
  "loc": {
    "start": {
      "line": 18,
      "column": 0
    },
    "end": {
      "line": 23,
      "column": 34
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n *  Integer marshalling is more complex than you would think.\n *  In order to enable sorting on these fields, we have to zero-pad them.\n *  This is because the string values are lexical sorted, so \"10\" comes before \"2\" but not \"02\".\n *\n *  We zero-pad to MAX_SAFE_INTEGER to account for javascripts float-only number system.\n *\n *  Instead of checking for an integer, we simply Math.floor the values.\n *\n *  To account for sign, we subtract negative numbers from MAX_SAFE_INTEGER and prefix with a marker,\n *  positive numbers are prefixed with a different marker.\n *\n *  This has the unfortunate effect of making the database values non-human-readable, but allows sane sorting.\n *\n *  If you do not need negative numbers it is more natural (and probably more performant) to\n *  use the `uint` type.\n ",
      "range": [
        0,
        807
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 17,
          "column": 3
        }
      }
    }
  ]
}